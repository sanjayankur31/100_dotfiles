#!/usr/bin/env bash
#
# based on the qutebrowser password_fill script, and the passmenu script

shopt -s nullglob globstar
password=""

get_password_file () {

    if [[ -n $WAYLAND_DISPLAY ]]; then
        dmenu=("wofi" "-i" "--prompt" "search>" "--dmenu")
    elif [[ -n $DISPLAY ]]; then
        dmenu=("rofi" "-i" "-p" "search>" "-dmenu" "~/.config/rofi.rasi")
    else
        echo "Error: No Wayland or X11 display detected" >&2
        exit 1
    fi

    prefix=${PASSWORD_STORE_DIR-~/.password-store}
    password_files=( "$prefix"/**/*.gpg )
    password_files=( "${password_files[@]#"$prefix"/}" )
    password_files=( "${password_files[@]%.gpg}" )

    password=$(printf '%s\n' "${password_files[@]}" | "${dmenu[@]}" "$@")

    [[ ${password} ]] || { echo "No password file selected/found"; exit -1 ;};
}

usage() {
    prgname=$(basename $(which $0))
    echo "$prgname: View pass entries using rofi/wofi"
    echo "Usage: $prgname [-cCeh]"
    echo
    echo "Without any arguments, opens the rofi/wofi window and displays the selected entry."
    echo "Optional arguments:"
    echo
    echo "    -c: copy entry instead of showing it"
    echo "    -C: copy entry and show it"
    echo "    -e: open entry for editing"
    echo "    -h: print this usage text and exit"
}

if [ $# -lt 1 ]
then
    get_password_file
    echo "** Entry: $password **"
    echo
    pass "$password" 2>/dev/null
    exit 1
fi

# parse options
while getopts "Cceh" OPTION
do
    case $OPTION in
        e)
            get_password_file
            edit_file
            pass edit "$password"
            echo "** Entry updated: $password **"
            echo
            pass show "$password" 2>/dev/null
            exit 0
            ;;
        c)
            get_password_file
            echo "** Entry: $password **"
            echo
            pass show -c "$password" 2>/dev/null
            exit 0
            ;;
        C)
            get_password_file
            echo "** Entry: $password **"
            echo
            pass show "$password" 2>/dev/null
            echo
            pass show -c "$password" 2>/dev/null
            exit 0
            ;;
        h)
            usage
            exit 0
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done

echo "Unexpected arguments: $@"
echo
usage
exit 1
