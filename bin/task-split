#!/usr/bin/env python3
"""
Split a taskwarrior task into sub-tasks

File: task-split.py

Copyright 2025 Ankur Sinha
Author: Ankur Sinha <sanjay DOT ankur AT gmail DOT com>
"""


import typing
import typer
import subprocess
import json


import logging


logging.basicConfig(level=logging.NOTSET)
logger = logging.getLogger("task-split")
logger.setLevel(logging.INFO)
logger.propagate = False

formatter = logging.Formatter("%(name)s (%(levelname)s): %(message)s")
handler = logging.StreamHandler()
handler.setLevel(logging.INFO)
handler.setFormatter(formatter)

logger.addHandler(handler)


def split(src_task: int, new_project: str, sub_tasks: typing.List[str],
          dry_run: bool = True, annotate: bool = True) -> None:
    """Split task into new sub-tasks

    For each provided sub_tasks string, a new task is created using the string
    as description in the provided new_project. Annotations from the provided
    src_task are copied over and the src_task is removed.

    If dry_run is enabled (default), the src_task will be obtained but not
    processed.

    :param src_task: id of task to split
    :type src_task: int
    :param sub_tasks: list of sub-tasks to create
    :type sub_tasks: list(str)
    :param dry_run: toggle dry run
    :type dry_run: bool
    :param annotate: toggle if annotations should be copied (and initial task
        summary added as annotation)
    :type annotate: bool
    :returns: None

    """
    if dry_run:
        logger.info("DRY RUN: No changes will be made, only commands shown")

    # Always get info on the task
    ret = None
    get_task_command = f"task {src_task} export"
    logger.info(f"COMMAND: {get_task_command}")
    ret = subprocess.run(get_task_command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if ret.returncode == 0:
        task_stdout = ret.stdout.decode(encoding="utf-8")
        task_json = (json.loads(task_stdout)[0])
        logger.info(f"TASK JSON: {task_json}")
        tags = task_json.get('tags', [])
        priority = task_json.get('priority', 'L')
        due = task_json.get('due', 'eod')
        estimate = task_json.get('estimate', '1h')
        impact = task_json.get('impact', 'L')
        annotations = task_json.get('annotations', [])
        description = task_json.get('description')
        uuid = task_json.get('uuid')

        # clear ret for future dry runs
        ret = None

        for sub_task in sub_tasks:
            new_task_command = f"task add project:{new_project} tags:{','.join(tags)} priority:{priority} due:{due} impact:{impact} estimate:{estimate} '{sub_task}'"
            logger.info(f"COMMAND: {new_task_command}")

            if not dry_run:
                ret = subprocess.run(new_task_command.split())

            if annotate:
                annotate_task_command = f"task +LATEST annotate '{description}'"
                logger.info(f"COMMAND: {annotate_task_command}")
                if not dry_run and (ret is not None and ret.returncode == 0):
                    ret = subprocess.run(annotate_task_command.split())

                for annotation in annotations:
                    annotation_description = annotation['description']
                    annotate_task_command = f"task +LATEST annotate '{annotation_description}'"
                    logger.info(f"COMMAND: {annotate_task_command}")
                    if not dry_run and (ret is not None and ret.returncode == 0):
                        ret = subprocess.run(annotate_task_command.split())
            else:
                logger.info("Annotations disabled")

        mark_original_as_done_command = f"task uuid:{uuid} done"
        logger.info(f"COMMAND: {mark_original_as_done_command}")
        if not dry_run:
            ret = subprocess.run(mark_original_as_done_command.split())


if __name__ == "__main__":
    typer.run(split)
